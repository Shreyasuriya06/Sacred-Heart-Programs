#include "robot-config.h"
#include "math.h"

//This auton is for the blue  alliance top square. The robot will go forward to hit the bottom flag and reverse and turn to get on the platform.


vex::competition    Competition;



void pre_auton( void ) {
  // All activities that occur before the competition starts
  // Example: clearing encoders, setting servo positions, ...
  
}


double mathfunction (double targetdistance)
{
    double wheeldiameter=5.0;
    double wheelcircumference =wheeldiameter*M_PI;
    double motorrotations= targetdistance/ wheelcircumference;
    return motorrotations;
}


void reverse ( double targetdistance, double speed)
{  
    double reversedistance= mathfunction(targetdistance);
    Brain.Screen.printAt( 10, 50, "reverse motor rotation %d", reversedistance);
    RightMotor.startRotateFor(reversedistance,rotationUnits::rev,speed,velocityUnits::pct);
    LeftMotor.startRotateTo(reversedistance,rotationUnits::rev,speed,velocityUnits::pct);
    while (RightMotor.isSpinning()&&LeftMotor.isSpinning())
    {}   
    LeftMotor.stop();
    RightMotor.stop();    
}

void forward ( double targetdistance,double speed)
{  
    double forwarddistance= mathfunction(targetdistance);
    Brain.Screen.printAt( 10, 50, "forward motor rotation %d", forwarddistance);
    RightMotor.startRotateFor(forwarddistance,rotationUnits::rev,speed,velocityUnits::pct);
    LeftMotor.startRotateTo(forwarddistance,rotationUnits::rev,speed,velocityUnits::pct);
    while (RightMotor.isSpinning()&&LeftMotor.isSpinning())
    {}
    LeftMotor.stop();
    RightMotor.stop();    
        
}
void leftturn()
{
     
    LeftMotor.spin( directionType::rev, 50, velocityUnits::pct );  
    RightMotor.spin( directionType::fwd, 50, velocityUnits::pct );  
    task::sleep(1300); 
    LeftMotor.stop();
    RightMotor.stop();
}
    
    


void rightturn ()
{ 
    LeftMotor.spin( directionType::fwd, 50, velocityUnits::pct );  
    RightMotor.spin( directionType::rev, 50, velocityUnits::pct );  
    task::sleep(1300); 
    LeftMotor.stop();
    RightMotor.stop();
}
    


void autonomous( void ) 
 
{
    while (1)
    {
    vex::task::sleep(100);
    }
       

}



void usercontrol( void ) 
{
  // User control code here, inside the loop
 
    Brain.Screen.print("Driver Control Started for Kaillou :)");
    
    
    int intakeSpeedPCT = 100;
    int flywheelSpeedPCT = 100;
    
    
    while(1)
    {

        //Drive Control
        //Set the left and right motor to spin forward using the controller Axis values as the velocity value.
        LeftMotor.spin(vex::directionType::fwd, Controller1.Axis3.value(),  vex::velocityUnits::pct);
        RightMotor.spin(vex::directionType::fwd, Controller1.Axis2.value(), vex::velocityUnits::pct);
        
        
        //Intake Control
        if(Controller2.ButtonX.pressing()) 
        { //If the X button is pressed...
            //...Spin the Intake motor forward.
            IntakeMotor.spin(vex::directionType::fwd, intakeSpeedPCT, vex::velocityUnits::pct);
        }
        
        else if(Controller2.ButtonY.pressing()) 
        { //If the down button is pressed...
            //...Spin the arm motor backward.
            IntakeMotor.spin(vex::directionType::rev, intakeSpeedPCT, vex::velocityUnits::pct);
        }
       
        else 
        { //If the X or Y button is not pressed...
            //...Stop the Intake motor.
            IntakeMotor.stop(vex::brakeType::brake);
        }
        
        //Flywheel Control
        if(Controller2.ButtonB.pressing()) 
        { //If the B button is pressed...
            //...Spin the Flywheel motor forward.
            FlywheelMotor1.spin(vex::directionType::fwd,flywheelSpeedPCT, vex::velocityUnits::pct);
            FlywheelMotor2.spin(vex::directionType::fwd,flywheelSpeedPCT,  vex::velocityUnits::pct);
        }
        
        else 
        { //If B button is not pressed...
            //...Stop the Flywheel motor.
            FlywheelMotor1.stop(vex::brakeType::coast);
            FlywheelMotor2.stop(vex::brakeType::coast);
        }
		vex::task::sleep(20); //Sleep the task for a short amount of time to prevent wasted resources.
    }    
}

//
// Main will set up the competition functions and callbacks.
//
int main() 
{
    
   //pre_auton();
   // Competition.autonomous( autonomous );
   //Competition.drivercontrol( usercontrol );
   usercontrol();
   
    //Prevent main from exiting with an infinite loop.                        
    while(1) 
    {
      vex::task::sleep(100);//Sleep the task for a short amount of time to prevent wasted resources.
    }    
       
}
   
